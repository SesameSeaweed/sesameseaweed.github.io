<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Leetcode | SesameSeaweed's Blog]]></title>
  <link href="http://SesameSeaweed.github.io/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://SesameSeaweed.github.io/"/>
  <updated>2014-09-15T15:17:28-04:00</updated>
  <id>http://SesameSeaweed.github.io/</id>
  <author>
    <name><![CDATA[SesameSeaweed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Add Two Numbers]]></title>
    <link href="http://SesameSeaweed.github.io/blog/add-two-numbers.html/"/>
    <updated>2014-09-15T15:05:02-04:00</updated>
    <id>http://SesameSeaweed.github.io/blog/add-two-numbers</id>
    <content type="html"><![CDATA[<p>链表类型最简单的题目了吧。尤其是题目指明了数字是以倒序存储的。
我觉得这道题的难度在于怎么可以把题目写的简练。对于链表题，要考虑链表本身是不是空。两个链表同时处理就要考虑什么时候哪个链表可能是空的。
还有一个链表题很需要搞清楚的点就是java里面的对象引用。在初始化时，“=”语句左边的是引用，右边new出来的是对象。在后面的左右都是引用的“=”语句时，左右的引用同时指向了右边引用所指向的对象。参考了：<a href="http://www.cnblogs.com/focusChen/articles/2497768.html">http://www.cnblogs.com/focusChen/articles/2497768.html</a></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">addTwoNumbers</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">l1</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">l2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">carry</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="n">ListNode</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>            <span class="n">ListNode</span> <span class="n">head</span> <span class="o">=</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'>            <span class="n">ListNode</span> <span class="n">cur1</span> <span class="o">=</span> <span class="n">l1</span><span class="o">;</span>
</span><span class='line'>            <span class="n">ListNode</span> <span class="n">cur2</span> <span class="o">=</span> <span class="n">l2</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="nf">while</span><span class="o">(</span><span class="n">cur1</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">cur2</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">cur1</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>                <span class="n">carry</span> <span class="o">+=</span> <span class="n">cur1</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
</span><span class='line'>                <span class="n">cur1</span> <span class="o">=</span> <span class="n">cur1</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">cur2</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>                <span class="n">carry</span> <span class="o">+=</span> <span class="n">cur2</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
</span><span class='line'>                <span class="n">cur2</span> <span class="o">=</span> <span class="n">cur2</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="n">carry</span> <span class="o">%</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>            <span class="n">carry</span> <span class="o">=</span> <span class="n">carry</span> <span class="o">/</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Median of Two Sorted Arrays]]></title>
    <link href="http://SesameSeaweed.github.io/blog/median-of-two-sorted-arrays.html/"/>
    <updated>2014-09-12T15:29:32-04:00</updated>
    <id>http://SesameSeaweed.github.io/blog/median-of-two-sorted-arrays</id>
    <content type="html"><![CDATA[<p>这题在LeetCode上的AC Rate也只有17.5%。也属于corner tests神多的题目。一看到这种题目就头超大&hellip;</p>

<p>因为之前刷leetcode的时候也有做过这题，是看了discussion board上面一个根据找第K小的题目改编来的。舍弃前k个数和后k个数。这个做法这次没有实现。觉得很麻烦。一个巨好巨神的分析：<a href="http://leetcode.com/2011/03/median-of-two-sorted-arrays.html">http://leetcode.com/2011/03/median-of-two-sorted-arrays.html</a>
印象中上次做题的时候就没有注意到
1. 在divide成子问题的时候，两个Array抛掉的都是数组长度的一半，这样就破坏了题目本身找median
2. 当另一个数组是偶数长度的时候，除去中点，中点旁边的那一个元素也不能舍弃。</p>

<p>这次的思路是参考了<a href="http://www.acmerblog.com/leetcode-median-of-two-sorted-arrays-5330.html">http://www.acmerblog.com/leetcode-median-of-two-sorted-arrays-5330.html</a>
两个数组，分别遍历，取小的，直到到达median。还有就是判断数组长度是不是偶数(median &amp; 1) == 0。感觉位运算有时候特别简洁，但是实在是不怎么熟。
这个人的代码也感觉很简洁的说。学渣也只有膜拜学习了。。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">findMedianSortedArrays</span><span class="o">(</span><span class="kt">int</span> <span class="n">A</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">B</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">B</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">median</span> <span class="o">=</span> <span class="o">(</span><span class="n">m</span> <span class="o">+</span> <span class="n">n</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">double</span> <span class="n">prev</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">post</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">median</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="mi">2</span><span class="o">){</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">m</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">m</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="n">A</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">return</span> <span class="n">B</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span><span class="o">((</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;=</span> <span class="n">median</span> <span class="o">/</span> <span class="mi">2</span><span class="o">){</span>
</span><span class='line'>            <span class="n">prev</span> <span class="o">=</span> <span class="n">post</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;=</span> <span class="n">m</span><span class="o">){</span>
</span><span class='line'>                <span class="n">post</span> <span class="o">=</span> <span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>                <span class="n">j</span><span class="o">++;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">j</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;=</span> <span class="n">n</span><span class="o">){</span>
</span><span class='line'>                <span class="n">post</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>                <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">]){</span>
</span><span class='line'>                <span class="n">post</span> <span class="o">=</span> <span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>                <span class="n">j</span><span class="o">++;</span>
</span><span class='line'>            <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>                <span class="n">post</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>                <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">((</span><span class="n">median</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="o">(</span><span class="n">prev</span> <span class="o">+</span> <span class="n">post</span><span class="o">)</span> <span class="o">/</span><span class="mi">2</span><span class="o">;</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="n">post</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Substring Without Repeating Characters]]></title>
    <link href="http://SesameSeaweed.github.io/blog/longest-substring-without-repeating-characters.html/"/>
    <updated>2014-09-12T11:06:40-04:00</updated>
    <id>http://SesameSeaweed.github.io/blog/longest-substring-without-repeating-characters</id>
    <content type="html"><![CDATA[<p>感觉类似字符数组找最长不重复子序列，字符数组是否有重复字符出现，字符数组删除重复类型题目都是要维护一张表，类似HashTable。</p>

<p>这道题遇到的时候想很多情况。越想越觉得复杂，边角太多。于是大概看了一下别人的思路。网上解法都是维护一张表，但是表的设计各有不同。</p>

<p>我的解法是 维护一张表table，表里记录的是最近一次遇到某个字符的位置。比如，对于字符串“qpxrjxkltzyx”，以x为例。以i作为index遍历。以start表示本轮遍历的开始位置。</p>

<p>遍历思路：
如果start = 0，这是第一轮遍历，遍历到x前，table[s.charAt(x)] = -1。经过x时，table[s.charAt(x)] = 2。
然后当i == 5时，因为发现有重复的x，所以要重新开始查找。查找的起点应该是从start = 3开始。同时要记录下这时的最长序列。而这时，table[s.charAt(x)]应该设为5。</p>

<p>算法总结：
表table记录的是最近一次遇到某字符的位置。如果从未遇到，设为 -1。
遍历到字母x的时候，判断从这轮的start开始，
    没有遇到(table[s.charAt(i)] &lt; start) 把当前长度加1，记录下当前位置；
    遇到 更新start的位置；更新table；判断更新最大值；记录长度；将index回退一步
我在更新长度的时候有过bug：长度应该已经是(i - start + 1)，因为起点是在start，而index又是从i开始的。</p>

<p>很多细节都没有一下想清楚。
代码：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">int</span> <span class="nf">lengthOfLongestSubstring</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="kt">int</span><span class="o">[]</span> <span class="n">table</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">256</span><span class="o">];</span>
</span><span class='line'>        <span class="n">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">table</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">table</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">length</span><span class="o">++;</span>
</span><span class='line'>                <span class="n">table</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">else</span><span class="o">{</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">table</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;=</span> <span class="n">start</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">table</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)]</span> <span class="o">!=</span> <span class="n">i</span><span class="o">){</span>
</span><span class='line'>                    <span class="n">start</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">table</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">max</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">length</span><span class="o">,</span> <span class="n">max</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">length</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">i</span> <span class="o">=</span> <span class="n">start</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">max</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">length</span><span class="o">,</span> <span class="n">max</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">max</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Sum]]></title>
    <link href="http://SesameSeaweed.github.io/blog/two-sum.html/"/>
    <updated>2014-09-10T15:10:11-04:00</updated>
    <id>http://SesameSeaweed.github.io/blog/two-sum</id>
    <content type="html"><![CDATA[<p>Given an array of integers, find two numbers such that they add up to a specific target number.
<a href="https://oj.leetcode.com/problems/two-sum/">https://oj.leetcode.com/problems/two-sum/</a></p>

<p>排序或者查找的变形。题目中指出只有一组正解。利用HashMap，依次扫描。
对于每一个数 numbers[i]，先判断target - numbers[i] 是否已经在HashMap里面。
    如果在，就返回map.get(target - numbers[i]) + 1 和 i + 1;
    如果不在， 把数组中每个数作为Key，对应的下标作为value。</p>

<p>本题关键在于HashMap的设计。要方便查找一个期望值(target - numbers[i])已经被扫描过了，而且希望在O(1)的时间内得到本数的下标。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TwoSum</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">twoSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">count</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">result</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">result</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
